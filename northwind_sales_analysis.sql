-- EDA Qustions Answered: --

-- 1. What is the average number of orders per customer? Are there high-value repeat customers?
-- >

-- Here I calculated the average number of orders placed per customer by dividing total distinct orders by total distinct customers.
-- This helps identify what qualifies as a high-order customer.

SELECT 
  ROUND(COUNT(DISTINCT OrderID) / COUNT(DISTINCT CustomerID), 2) AS AvgOrdersPerCustomer
FROM orders;


-- Calculated the total number of orders and total revenue generated by each customer. 
-- This provides a customer-level view of purchase behavior and value.

SELECT 
  o.CustomerID,
  COUNT(DISTINCT o.OrderID) AS TotalOrders,
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS TotalRevenue
FROM orders o
JOIN `order details` od on o.OrderID = od.OrderID
GROUP BY o.CustomerID;

--  I filtered customers who placed more than the average number of orders (9), 
-- identifying 39 high-value or repeat customers based on purchase frequency.
SELECT 					
  o.CustomerID,					
  COUNT(DISTINCT o.OrderID) AS TotalOrders,					
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS TotalRevenue					
FROM orders o					
JOIN `order details` od on o.OrderID = od.OrderID					
GROUP BY o.CustomerID
Having COUNT(DISTINCT o.OrderID) > 9;					


-- 2. How do customer order patterns vary by city or country?
-- >

-- The number of orders, total revenue, and average revenue per order for each city within every country, 
-- helping to identify top-performing locations based on customer orders.
SELECT 
  c.Country,
  c.City,
  COUNT(DISTINCT o.OrderID) AS TotalOrders,
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS TotalRevenue,
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID), 2) AS AvgOrderValue
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN `Order Details` od ON o.OrderID = od.OrderID
GROUP BY c.Country, c.City
ORDER BY TotalOrders DESC;

SELECT 
  c.Country,
  COUNT(DISTINCT o.OrderID) AS TotalOrders,
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS TotalRevenue,
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID), 2) AS AvgOrderValue
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN `Order Details` od ON o.OrderID = od.OrderID
GROUP BY c.Country
ORDER BY TotalOrders DESC;


-- Country and City Rank by Orders
SELECT 
  c.Country,
  c.City,
  COUNT(DISTINCT o.OrderID) AS TotalOrders,
  DENSE_RANK() OVER (ORDER BY COUNT(DISTINCT o.OrderID) DESC) AS CountryCityGlobalRank,
  DENSE_RANK() OVER (PARTITION BY c.Country ORDER BY COUNT(DISTINCT o.OrderID) DESC) AS CityRankWithinCountry
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.Country, c.City
ORDER BY TotalOrders DESC;

-- 3. Can we cluster customers based on total spend, order count, and preferred categories?
-- >

-- Calculated the total number of orders and total spending for each customer by summing up order value after applying discounts. 
-- This forms the core of the customer spending profile.
WITH CustomerSpend AS (
    SELECT 
        o.CustomerID,
        COUNT(DISTINCT o.OrderID) AS TotalOrders,
        ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS TotalSpend
    FROM Orders o
    JOIN `Order Details` od ON o.OrderID = od.OrderID
    GROUP BY o.CustomerID
),
PreferredCategory AS (
    SELECT 
        o.CustomerID,
        p.CategoryID,
        COUNT(*) AS CategoryOrderCount,
        ROW_NUMBER() OVER(PARTITION BY o.CustomerID ORDER BY COUNT(*) DESC) AS rn
    FROM Orders o
    JOIN `Order Details` od ON o.OrderID = od.OrderID
    JOIN Products p ON od.ProductID = p.ProductID
    GROUP BY o.CustomerID, p.CategoryID
)
SELECT 
    cs.CustomerID,
    cs.TotalOrders,
    cs.TotalSpend,
    pc.CategoryID,
    cat.CategoryName AS PreferredCategory
FROM CustomerSpend cs
LEFT JOIN PreferredCategory pc 
    ON cs.CustomerID = pc.CustomerID AND pc.rn = 1
LEFT JOIN Categories cat 
    ON pc.CategoryID = cat.CategoryID
    ORDER BY TotalSpend DESC;
    
-- 4. Which product categories or products contribute most to order revenue?
-- > 
    
-- Calculated the total revenue generated by each product within its category by summing the discounted order value. 
-- Then I selected the top 10 product-category pairs that contribute the highest to the overall revenue.
SELECT 
  cat.CategoryName,
  p.ProductName,
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS TotalRevenue
FROM `Order Details` od
JOIN Products p ON od.ProductID = p.ProductID
JOIN Categories cat ON p.CategoryID = cat.CategoryID
GROUP BY cat.CategoryName, p.ProductName
ORDER BY TotalRevenue DESC
LIMIT 10;

-- 5 .Are there any correlations between orders and customer location or product category?
-- >

-- The total number of orders and total revenue from each city,
-- region, and country to understand how customer location correlates with order volume and revenue contribution.
SELECT 
  c.Country,
  c.Region,
  c.City,
  COUNT(DISTINCT o.OrderID) AS TotalOrders,
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS TotalRevenue
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN `Order Details` od ON o.OrderID = od.OrderID
GROUP BY c.Country, c.Region, c.City
ORDER BY TotalRevenue DESC;

SELECT 
  c.Country,
  c.Region,
  c.City,
  cat.CategoryName,
  COUNT(DISTINCT o.OrderID) AS TotalOrders,
  ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 2) AS TotalRevenue
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN `Order Details` od ON o.OrderID = od.OrderID
JOIN Products p ON od.ProductID = p.ProductID
JOIN Categories cat ON p.CategoryID = cat.CategoryID
GROUP BY c.Country, c.Region, c.City, cat.CategoryName
ORDER BY c.Country, TotalRevenue DESC;

-- 6. What is the geographic and title-wise distribution of employees?
-- >

-- Number of employees in each city, region, and country to understand how the workforce is geographically distributed.
SELECT Country, Region, City, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY Country, Region, City
ORDER BY Country, Region, City;

--  How many employees hold each job title to see the distribution of roles and identify the most common designations.
SELECT Title, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY Title
ORDER BY EmployeeCount DESC;

-- Combined distribution by country, city, and title
SELECT Country, City, Title, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY Country, City, Title
ORDER BY Country, City, Title;


-- 7. What trends can we observe in hire dates across employee titles?
-- > 

 -- I examined how many employees were hired each year across different job titles
 -- to identify hiring trends and growth patterns over time for each role.
SELECT 
    Title,
    YEAR(HireDate) AS HireYear,
    COUNT(*) AS EmployeeCount
FROM 
    Employees
GROUP BY 
    Title, YEAR(HireDate)
ORDER BY 
    HireYear, Title;

-- 8. What patterns exist in employee title and courtesy title distributions?
-- >

-- Analyzed how courtesy titles like 'Mr.', 'Ms.', or 'Dr.' are distributed across different job roles to
-- explore any patterns related to formality or gender representation in titles.
SELECT TitleOfCourtesy, Title, COUNT(*) AS EmployeeCount
FROM Employees
GROUP BY TitleOfCourtesy, Title
ORDER BY TitleOfCourtesy, Title;


-- 9. Are there correlations between product pricing, stock levels, and sales performance?
-- >

-- Each product’s price, current stock, total units sold, 
-- and total revenue to explore any potential correlation between pricing, inventory levels, and sales performance.


SELECT 
    p.ProductID,
    p.ProductName,
    p.UnitPrice AS ProductPrice,
    p.UnitsInStock,
    SUM(od.Quantity) AS TotalUnitsSold,
    SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM Products p
JOIN `Order Details` od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName, p.UnitPrice, p.UnitsInStock;


-- 10. How does product demand change over months or seasons?
-- >

-- Tracked monthly product demand by summing the total units sold per month, 
-- allowing us to observe seasonal sales trends throughout the year.
SELECT 
    MONTH(o.OrderDate) AS OrderMonth,
    MONTHNAME(o.OrderDate) AS MonthName,
    SUM(od.Quantity) AS TotalUnitsSold
FROM Orders o
JOIN `Order Details` od ON o.OrderID = od.OrderID
GROUP BY MONTH(o.OrderDate), MONTHNAME(o.OrderDate)
ORDER BY OrderMonth;


-- 11. Can we identify anomalies in product sales or revenue performance?
-- >

-- Calculated each product’s total revenue and compared it to 
-- the average revenue across all products to identify unusually high or low performers (anomalies).
SELECT 
    p.ProductID,
    p.ProductName,
    SUM(od.Quantity * od.UnitPrice) AS TotalRevenue,
    AVG(SUM(od.Quantity * od.UnitPrice)) OVER () AS AvgRevenue,
    SUM(od.Quantity * od.UnitPrice) - 
    AVG(SUM(od.Quantity * od.UnitPrice)) OVER () AS DeviationFromAvg
FROM `Order Details` od
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY DeviationFromAvg DESC;


-- 12. Are there any regional trends in supplier distribution and pricing?
-- >

-- Here I counted the number of suppliers per country to understand the regional distribution of suppliers.
SELECT Country, COUNT(*) AS SupplierCount
FROM Suppliers
GROUP BY Country
ORDER BY SupplierCount DESC;

-- Calculated the average product price per supplier country to analyze regional pricing trends among suppliers.
SELECT s.Country, ROUND(AVG(p.UnitPrice), 2) AS AvgUnitPrice
FROM Suppliers s
JOIN Products p ON s.SupplierID = p.SupplierID
GROUP BY s.Country
ORDER BY AvgUnitPrice DESC;
